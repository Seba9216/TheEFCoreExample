// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using nemt;

#nullable disable

namespace nemt.Migrations
{
    [DbContext(typeof(nemtContext))]
    [Migration("20241104133604_TeamWorkers")]
    partial class TeamWorkers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("nemt.models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("nemt.models.GroupUser", b =>
                {
                    b.Property<int>("GroupUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupUserId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("nemt.models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 100,
                            Name = "MySuperAmazingTask"
                        });
                });

            modelBuilder.Entity("nemt.models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            Name = "FrontEnd"
                        },
                        new
                        {
                            TeamId = 2,
                            Name = "BackEnd"
                        },
                        new
                        {
                            TeamId = 3,
                            Name = "Testers"
                        });
                });

            modelBuilder.Entity("nemt.models.TeamWorker", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<int>("TeamWorkerId")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("TeamWorkers");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            WorkerId = 1,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 3,
                            WorkerId = 1,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 1,
                            WorkerId = 2,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 1,
                            WorkerId = 3,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 2,
                            WorkerId = 3,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 2,
                            WorkerId = 4,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 2,
                            WorkerId = 5,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 3,
                            WorkerId = 6,
                            TeamWorkerId = 0
                        },
                        new
                        {
                            TeamId = 3,
                            WorkerId = 7,
                            TeamWorkerId = 0
                        });
                });

            modelBuilder.Entity("nemt.models.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TodoId"));

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("TodoId");

                    b.HasIndex("TaskId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            TodoId = 2,
                            IsDone = true,
                            Name = "Produce Software",
                            TaskId = 100
                        },
                        new
                        {
                            TodoId = 1,
                            IsDone = false,
                            Name = "Brew coffee",
                            TaskId = 100
                        });
                });

            modelBuilder.Entity("nemt.models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("nemt.models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerId"));

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            WorkerId = 1,
                            WorkerName = "Steen Secher"
                        },
                        new
                        {
                            WorkerId = 2,
                            WorkerName = "Ejvind Møller"
                        },
                        new
                        {
                            WorkerId = 3,
                            WorkerName = "Konrad Sommer"
                        },
                        new
                        {
                            WorkerId = 4,
                            WorkerName = "Sofus Lotus"
                        },
                        new
                        {
                            WorkerId = 5,
                            WorkerName = "Remo Lademann"
                        },
                        new
                        {
                            WorkerId = 6,
                            WorkerName = "Ella Fanth"
                        },
                        new
                        {
                            WorkerId = 7,
                            WorkerName = "Anne Dam"
                        });
                });

            modelBuilder.Entity("nemt.models.GroupUser", b =>
                {
                    b.HasOne("nemt.models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nemt.models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nemt.models.TeamWorker", b =>
                {
                    b.HasOne("nemt.models.Team", null)
                        .WithMany("Workers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nemt.models.Worker", null)
                        .WithMany("Teams")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("nemt.models.Todo", b =>
                {
                    b.HasOne("nemt.models.Task", "task")
                        .WithMany("Todos")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("task");
                });

            modelBuilder.Entity("nemt.models.Task", b =>
                {
                    b.Navigation("Todos");
                });

            modelBuilder.Entity("nemt.models.Team", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("nemt.models.Worker", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
